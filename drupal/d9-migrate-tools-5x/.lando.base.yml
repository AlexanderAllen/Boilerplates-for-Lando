# By default, event commands will run on the appserver service
events:
  # pre-destroy:
  #   - mysqldump --verbose --user=${APP_DB_ROOTUSER} --host=database ${APP_DB_NAME} | xz --compress > /app/db/predestroy_backup_$(date +%Y-%m-%d-%H.%M.%S).sql.xz
  #   - ls -lah /app/db/latest_backup.sql.xz

  # pre-rebuild

tooling:

  login:
    description: Creates a regular login link
    service: appserver
    dir: /app
    cmd:
      - echo "Logging you into ${DRUSH_OPTIONS_URI}"
      - php ${DRUPAL_VENDOR}/bin/drush --root=${DRUPAL_ROOT} cache:rebuild
      - php ${DRUPAL_VENDOR}/bin/drush --root=${DRUPAL_ROOT} uli --uid=2

  admin:
    description: Creates a root login link
    service: appserver
    dir: /app
    cmd:
      - php ${DRUPAL_VENDOR}/bin/drush --root=${DRUPAL_ROOT} cache:rebuild
      - php ${DRUPAL_VENDOR}/bin/drush --root=${DRUPAL_ROOT} uublk `php ${DRUPAL_VENDOR}/bin/drush --root=${DRUPAL_ROOT} --pipe uinf --uid=1 --fields=name`
      - php ${DRUPAL_VENDOR}/bin/drush --root=${DRUPAL_ROOT} uli --uid=1

  console:
    description: Open an interactive shell for Drupal.
    service: appserver
    dir: /app
    cmd:
      - php ${DRUPAL_VENDOR}/bin/drush --root=${DRUPAL_ROOT} php:cli

  watchdog:
    description: Displays most recent watchdog messages.
    service: appserver
    dir: /app
    cmd: php ${DRUPAL_VENDOR}/bin/drush --root=${DRUPAL_ROOT} wd-show

  install:
    description: Install a fresh Drupal database
    service: appserver
    dir: /app/html
    cmd:
      - php `${DRUPAL_VENDOR}/bin/drush --root=${COMPOSER_ROOT} site-install --yes --db-url=mysql://${APP_DB_ROOTUSER}@database:3306/${APP_DB_NAME}
        --db-su=${APP_DB_USER}
        --db-su-pw=${APP_DB_PASS}
        --account-name="admin"
        --account-pass="admin"
        --uri=${DRUSH_OPTIONS_URI}
        --site-name="boilerplate-d9"
        standard`
      # - php ${DRUPAL_VENDOR}/bin/drush --root=${DRUPAL_ROOT} user:password admin "admin"
      # - php ${DRUPAL_VENDOR}/bin/drush --root=${DRUPAL_ROOT} core:cron
      # - php ${DRUPAL_VENDOR}/bin/drush --root=${DRUPAL_ROOT} core:requirements    

  nuke:
    description: Nuke Composer vendor dependencies.
    service: appserver
    dir: /app
    cmd:
      - bash -c "echo ''"
      - bash -c "echo '=== NUKE COMPOER DEPS ==='"
      # Git is ignoring lockfile.
      - rm composer.lock
      - rm -rf vendor
      # Nuking cache may trigger packagist throttling.
      - composer clear-cache

  # todo config-dump

  db-connect:
    description: Connects to the database service
    service: database
    cmd: mysql --user=${APP_DB_ROOTUSER}

  db-create:
    description: Creates the default database
    service: database
    cmd: mysql --verbose --user=${APP_DB_ROOTUSER} --execute="create database ${APP_DB_NAME}"

  db-drop:
    description: Drops the default database
    service: database
    cmd: mysql --verbose --user=${APP_DB_ROOTUSER} --execute="drop database ${APP_DB_NAME}"

  db-show:
    description: Shows databases
    service: database
    cmd: mysql --user=${APP_DB_ROOTUSER} --execute="show databases;"

  db-tables:
    description: Shows tables for the default Lando database
    service: database
    cmd: mysql --verbose --user=${APP_DB_ROOTUSER} --execute="use ${APP_DB_NAME}; show tables;"

  db-truncate:
    description: Truncate all tables on default database
    service: database
    dir: /app/db
    cmd: mysql --user=${APP_DB_ROOTUSER} --skip-column-names --silent --execute='show tables;' ${APP_DB_NAME} |
      while read table; do mysql --user=${APP_DB_ROOTUSER} --execute="truncate table $table" ${APP_DB_NAME}; done

  # Windows services like to use .zip sometimes (Azure).
  db-import-zip:
    description: Import .zip-formatted db dump
    service: database
    dir: /app/db
    cmd:
      - echo "Importing `ls -Art *.zip | tail -n 1`"
      - "unzip -p `ls -Art *.zip | tail -n 1` |
      mysql --user=${APP_DB_USER} --password=${APP_DB_PASS} ${APP_DB_NAME}"

  db-import-xz:
    description: Import the most recent XZ (LZMA, Liv-Ziv-Markov) compressed dump into the default database
    service: database
    dir: /app/db
    cmd:
      - echo "Importing `ls -Art *.xz | tail -n 1`"
      - "xz --decompress --stdout `ls -Art *.xz | tail -n 1` |
      mysql --user=${APP_DB_USER} --password=${APP_DB_PASS} ${APP_DB_NAME}"

  db-backup:
    description: Backup and compress database using XZ.
    service: database
    cmd:
      - mysqldump  --user=${APP_DB_ROOTUSER} ${APP_DB_NAME} | xz --compress > /app/db/${APP_DB_NAME}_backup_$(date +%Y-%m-%d-%H.%M.%S).sql.xz
      - echo "Database backed up to /app/db"
      - ls -lah /app/db/${APP_DB_NAME}_backup_*
